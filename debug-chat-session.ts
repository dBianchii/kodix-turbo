import {
  aiStudioRepository,
  chatRepository,
} from "./packages/db/src/repositories";

async function debugChatSession() {
  try {
    console.log("üîç [DEBUG] Buscando sess√µes de chat recentes...");

    // Buscar sess√µes mais recentes
    const sessions = await chatRepository.ChatSessionRepository.findByTeam({
      teamId: "cm4zbqvlx000213lxepfnc7w5", // ID do team
      limite: 5,
      offset: 0,
      ordenarPor: "updatedAt",
      ordem: "desc",
    });

    console.log(`üìä [DEBUG] Encontradas ${sessions.length} sess√µes recentes:`);

    for (const session of sessions) {
      console.log(`\nüìù [DEBUG] === SESS√ÉO: ${session.title} ===`);
      console.log(`   ‚Ä¢ ID: ${session.id}`);
      console.log(`   ‚Ä¢ aiModelId: ${session.aiModelId || "‚ùå NULL"}`);
      console.log(`   ‚Ä¢ Created: ${session.createdAt}`);
      console.log(`   ‚Ä¢ Updated: ${session.updatedAt}`);

      // Se tem aiModelId, buscar detalhes do modelo
      if (session.aiModelId) {
        console.log(`   üîç [DEBUG] Buscando detalhes do modelo...`);
        const model = await aiStudioRepository.AiModelRepository.findById(
          session.aiModelId,
        );

        if (model) {
          console.log(`   ‚úÖ Modelo encontrado:`);
          console.log(`      ‚Ä¢ Nome: ${model.name}`);
          console.log(`      ‚Ä¢ Provider: ${model.provider?.name || "Unknown"}`);
          console.log(
            `      ‚Ä¢ Config version: ${(model.config as any)?.version || model.name}`,
          );
          console.log(`      ‚Ä¢ Enabled: ${model.enabled}`);
        } else {
          console.log(
            `   ‚ùå Modelo com ID ${session.aiModelId} N√ÉO ENCONTRADO no banco!`,
          );
        }
      }

      // Buscar √∫ltima mensagem para contexto
      if (session.messages && session.messages.length > 0) {
        const lastMessage = session.messages[session.messages.length - 1];
        console.log(
          `   üí¨ √öltima mensagem: "${lastMessage?.content?.substring(0, 50)}..."`,
        );
      }
    }

    // Verificar todos os modelos dispon√≠veis
    console.log(`\nüéØ [DEBUG] === MODELOS DISPON√çVEIS ===`);
    const allModels = await aiStudioRepository.AiModelRepository.findMany({
      enabled: true,
      limite: 20,
    });

    console.log(`üìä Total de modelos habilitados: ${allModels.length}`);
    allModels.forEach((model) => {
      const configVersion = (model.config as any)?.version || model.name;
      console.log(
        `   ‚Ä¢ ${model.name} (API: ${configVersion}) - Provider: ${model.provider?.name}`,
      );
    });
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro:", error);
  }
}

debugChatSession();
