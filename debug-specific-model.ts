import { aiStudioRepository } from "./packages/db/src/repositories";

async function debugSpecificModel() {
  try {
    console.log("üîç [DEBUG] Verificando modelo espec√≠fico da sess√£o...");

    const sessionModelId = "u0idpyuh512s"; // ID do modelo da sess√£o "Modelo 4o mini"

    console.log(`üéØ Buscando modelo com ID: ${sessionModelId}`);

    const model =
      await aiStudioRepository.AiModelRepository.findById(sessionModelId);

    if (model) {
      console.log(`‚úÖ Modelo encontrado:`);
      console.log(`   ‚Ä¢ Nome: ${model.name}`);
      console.log(`   ‚Ä¢ Provider: ${model.provider?.name || "Unknown"}`);
      console.log(`   ‚Ä¢ Provider ID: ${model.providerId}`);
      console.log(`   ‚Ä¢ Enabled: ${model.enabled}`);
      console.log(`   ‚Ä¢ Config:`, model.config);

      const modelConfig = (model.config as any) || {};
      const modelName = modelConfig.version || model.name;
      console.log(`   ‚Ä¢ API Model Name: ${modelName}`);

      // Verificar provider
      if (model.provider) {
        console.log(`   ‚Ä¢ Provider details:`);
        console.log(`     - Name: ${model.provider.name}`);
        console.log(`     - Base URL: ${model.provider.baseUrl}`);
      }
    } else {
      console.log(`‚ùå Modelo com ID ${sessionModelId} N√ÉO ENCONTRADO!`);
    }

    // Tamb√©m verificar todos os modelos gpt-4o-mini dispon√≠veis
    console.log(`\nüîç [DEBUG] Todos os modelos gpt-4o-mini:`);
    const allModels = await aiStudioRepository.AiModelRepository.findMany({
      enabled: true,
      limite: 50,
    });

    const gpt4oMiniModels = allModels.filter(
      (m) =>
        m.name.toLowerCase().includes("gpt-4o-mini") ||
        m.name.toLowerCase().includes("4o-mini"),
    );

    console.log(
      `üìä Modelos gpt-4o-mini encontrados: ${gpt4oMiniModels.length}`,
    );
    gpt4oMiniModels.forEach((model) => {
      const configVersion = (model.config as any)?.version || model.name;
      console.log(
        `   ‚Ä¢ ${model.name} (ID: ${model.id}) - API: ${configVersion} - Provider: ${model.provider?.name}`,
      );
    });
  } catch (error) {
    console.error("‚ùå [DEBUG] Erro:", error);
  }
}

debugSpecificModel();
