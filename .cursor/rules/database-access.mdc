---
description: How to work with database repositories and models
globs: 
alwaysApply: false
---
# Database Access Patterns

This project uses Drizzle ORM with repositories pattern for database access.

## Importing Database Repositories

1. Always import repositories from the database package:
```ts
import { 
  userRepository, 
  teamRepository, 
  authRepository 
} from "@kdx/db";
```

2. In API handlers, access the repositories through the context:
```ts
export const myHandler = async ({
  ctx,
}: {
  ctx: MyProcedureContext;
}) => {
  // Access database through repositories
  const user = await ctx.db.userRepository.getUserById(ctx.auth.userId);
  
  // For team-specific operations
  const team = await ctx.db.teamRepository.getTeamById(teamId);
  
  return { user, team };
};
```

## Repository Structure

Repositories are located in `packages/db/src/repositories/` and follow these conventions:

1. Each entity has its own repository file (e.g., `userRepository.ts`)
2. Repository methods are exported as an object
3. Database schemas are defined in `packages/db/src/schema/`

## Creating a New Repository

1. Define your schema in `packages/db/src/schema/`:
```ts
// packages/db/src/schema/myEntity.ts
import { type InferSelectModel, type InferInsertModel } from "drizzle-orm";
import { nanoid } from "../nanoid";
import { createId } from "../utils";
import { varchar, pgTable, timestamp } from "drizzle-orm/pg-core";

export const myEntities = pgTable("my_entities", {
  id: varchar("id", { length: 191 })
    .$defaultFn(() => createId("myEntity"))
    .primaryKey(),
  name: varchar("name", { length: 191 }).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

export type MyEntity = InferSelectModel<typeof myEntities>;
export type MyEntityInsert = InferInsertModel<typeof myEntities>;
```

2. Create your repository file in `packages/db/src/repositories/`:
```ts
// packages/db/src/repositories/myEntityRepository.ts
import { eq } from "drizzle-orm";
import type { DB } from "../client";
import { myEntities } from "../schema/myEntity";

const getMyEntityById = (db: DB) => async (id: string) => {
  const result = await db
    .select()
    .from(myEntities)
    .where(eq(myEntities.id, id))
    .limit(1);
  
  return result[0] ?? null;
};

const createMyEntity = (db: DB) => async (data: MyEntityInsert) => {
  const result = await db.insert(myEntities).values(data).returning();
  return result[0];
};

export const myEntityRepository = {
  getMyEntityById,
  createMyEntity,
};
```

3. Export the repository in the index file:
```ts
// packages/db/src/repositories/index.ts
// ... existing exports
export { myEntityRepository } from "./myEntityRepository";
```