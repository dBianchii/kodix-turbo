---
description: Guidelines for using UI components from shadcn/ui and Radix
globs: apps/**/* packages/ui/**/*
alwaysApply: false
---
# UI Components and Design System

This project uses shadcn/ui components which are based on Radix UI primitives, with a custom styling layer using Tailwind CSS.

## Importing UI Components

1. Always import UI components from the `@kdx/ui` package:
```tsx
import { 
  Button, 
  Dialog, 
  Input, 
  Select, 
  Tabs 
} from "@kdx/ui";
```

2. Do not import Radix UI components directly, unless adding new components to the UI package.

## Using Shadcn/UI Components

### Dialog/Modal Windows
```tsx
import { Button, Dialog } from "@kdx/ui";

export const MyComponent = () => {
  return (
    <Dialog>
      <Dialog.Trigger asChild>
        <Button>Open Dialog</Button>
      </Dialog.Trigger>
      <Dialog.Content>
        <Dialog.Header>
          <Dialog.Title>Dialog Title</Dialog.Title>
          <Dialog.Description>Dialog description here.</Dialog.Description>
        </Dialog.Header>
        {/* Dialog content */}
        <Dialog.Footer>
          <Button>Action</Button>
        </Dialog.Footer>
      </Dialog.Content>
    </Dialog>
  );
};
```

### Form Components
```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { 
  Button, 
  Form, 
  Input, 
  Select 
} from "@kdx/ui";

const formSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  role: z.enum(["admin", "user"]),
});

export const MyForm = () => {
  const form = useForm({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      role: "user",
    },
  });

  const onSubmit = (values) => {
    console.log(values);
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <Form.Field
          control={form.control}
          name="name"
          render={({ field }) => (
            <Form.Item>
              <Form.Label>Name</Form.Label>
              <Form.Control>
                <Input {...field} />
              </Form.Control>
              <Form.Message />
            </Form.Item>
          )}
        />
        
        <Form.Field
          control={form.control}
          name="email"
          render={({ field }) => (
            <Form.Item>
              <Form.Label>Email</Form.Label>
              <Form.Control>
                <Input {...field} type="email" />
              </Form.Control>
              <Form.Message />
            </Form.Item>
          )}
        />
        
        <Form.Field
          control={form.control}
          name="role"
          render={({ field }) => (
            <Form.Item>
              <Form.Label>Role</Form.Label>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
              >
                <Form.Control>
                  <Select.Trigger>
                    <Select.Value placeholder="Select a role" />
                  </Select.Trigger>
                </Form.Control>
                <Select.Content>
                  <Select.Item value="admin">Admin</Select.Item>
                  <Select.Item value="user">User</Select.Item>
                </Select.Content>
              </Select>
              <Form.Message />
            </Form.Item>
          )}
        />
        
        <Button type="submit">Submit</Button>
      </form>
    </Form>
  );
};
```

## Extending the UI System

1. New components should be added to the `packages/ui/src` directory
2. Follow the existing patterns for component structure
3. Export all components through the package index file
4. Use Tailwind CSS for styling, following the project's design tokens