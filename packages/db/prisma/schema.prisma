// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model App_Roles {
  id              String  @id @default(cuid())
  appId           String
  roleName        String
  roleDescription String?
  maxRoleUsers    Int     @default(0)
  minRoleUsers    Int     @default(0)

  app App @relation(fields: [appId], references: [id])

  @@index([appId])
}

model AppWorkspaceConfig {
  id         String @id @default(cuid())
  Parameters String @db.MediumText // Para qualquer configuração 

  AppId String
  app   App    @relation("AppConfig", fields: [AppId], references: [id])

  WorkspaceId String
  workspace   Workspace @relation("WorkspaceConfig", fields: [WorkspaceId], references: [id])

  @@unique([AppId, WorkspaceId])
  @@index([AppId])
  @@index([WorkspaceId])
  @@map("App_Workspace_Config")
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       User[]        @relation("UserWorkspace")
  activeUsers User[]        @relation("UserActiveWorkspace")
  activeApps  App[]         @relation("AppWorkspace")
  Todo        Todo[]
  EventMaster EventMaster[]

  workspaceConfigs AppWorkspaceConfig[] @relation("WorkspaceConfig")
}

model App {
  id                  String               @id @default(cuid())
  name                String
  description         String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  subscriptionCost    Decimal
  activeWorkspaces    Workspace[]          @relation("AppWorkspace")
  idpartnerDev        DevPartner           @relation(fields: [devPartnerId], references: [id])
  devPartnerId        String
  urlApp              String               @unique
  appWorkspaceConfigs AppWorkspaceConfig[] @relation("AppConfig")

  appRoles App_Roles[]

  @@index([devPartnerId])
}

model DevPartner {
  id         String   @id @default(cuid())
  name       String
  partnerUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  App        App[]
}

model Technology {
  id   String @id @default(cuid())
  name String
}

enum Status {
  TODO
  INPROGRESS
  INREVIEW
  DONE
  CANCELED
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  //** 0 - No Priority
  //** 1 - Low
  //** 2 - Medium
  //** 3 - High
  priority    Int? //0 1 - LOW, 2 - MEDIUM, 3 high
  category    String?
  status      Status?
  reminder    Boolean?

  assignedToUserId String?
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  @@index([workspaceId])
  @@index([assignedToUserId])
}

model EventMaster {
  id        String    @id @default(cuid())
  rule      String
  DateStart DateTime
  DateUntil DateTime?

  eventInfo   EventInfo @relation(fields: [eventInfoId], references: [id])
  eventInfoId String

  EventExceptions    EventException[]
  EventCancellations EventCancellation[]
  EventDone          EventDone[]

  Workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([workspaceId])
  @@index([eventInfoId])
}

model EventInfo {
  id          String  @id @default(cuid())
  title       String?
  description String?

  EventException EventException[]
  EventDone      EventDone[]
  EventMaster    EventMaster[]
}

model EventException {
  id           String   @id @default(cuid())
  originalDate DateTime
  newDate      DateTime

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id])
  eventMasterId String

  EventInfo   EventInfo? @relation(fields: [eventInfoId], references: [id])
  eventInfoId String?

  @@index([eventMasterId])
  @@index([eventInfoId])
}

model EventCancellation {
  id           String   @id @default(cuid())
  originalDate DateTime

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id])
  eventMasterId String

  @@index([eventMasterId])
}

model EventDone {
  id           String   @id @default(cuid())
  eventDate    DateTime
  registerDate DateTime @default(now())
  done         Boolean
  details      String?

  doneBy User   @relation(fields: [userId], references: [id])
  userId String

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id])
  eventMasterId String

  EventInfo   EventInfo @relation(fields: [eventInfoId], references: [id])
  eventInfoId String

  @@index([eventMasterId])
  @@index([userId])
  @@index([eventInfoId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                String      @id @default(cuid())
  name              String?
  email             String?     @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  workspaces        Workspace[] @relation("UserWorkspace")
  Todo              Todo[]
  activeWorkspaceId String?     @map("activeWorkspaceId")
  activeWorkspace   Workspace?  @relation("UserActiveWorkspace", fields: [activeWorkspaceId], references: [id])
  EventDone         EventDone[]

  @@index([activeWorkspaceId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
