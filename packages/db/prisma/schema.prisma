generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model CareShift {
  id String @id @default(cuid())

  caregiverId String
  Caregiver   User   @relation(fields: [caregiverId], references: [id])

  teamId String
  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  checkIn  DateTime  @default(now())
  checkOut DateTime?

  shiftEndedAt DateTime?

  notes    String?
  CareTask CareTask[]

  @@index([caregiverId])
  @@index([teamId])
}

model CareTask {
  id        String   @id @default(cuid())
  eventDate DateTime

  doneAt DateTime?

  DoneBy       User?   @relation(fields: [doneByUserId], references: [id], onDelete: Restrict) //Restrict because we have to keep logs somehow
  doneByUserId String?

  Team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  EventMaster   EventMaster? @relation(fields: [eventMasterId], references: [id])
  eventMasterId String?

  idCareShift String
  CareShift   CareShift @relation(fields: [idCareShift], references: [id])

  title       String?
  description String?
  details     String?

  @@index([eventMasterId])
  @@index([doneByUserId])
  @@index([idCareShift])
  @@index([teamId])
}

//*---------------------   START ACCESS CONTROL    ---------------------*//

//? AppPermission defines which permissions are available for an app.
model AppPermission {
  id String @id @default(cuid())

  appId String
  App   App    @relation(fields: [appId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name        String
  description String?

  AppRole_defaults AppRole_default[] //Default roles that have this permission
  TeamAppRole      TeamAppRole[]

  @@index([appId])
}

//? AppRole_default defines which roles are available for an app by default. Should be cloned to TeamAppRole once app is installed for a team 
model AppRole_default {
  id String @id @default(cuid())

  appId String
  App   App    @relation(fields: [appId], references: [id], onDelete: Cascade) //TODO: Do we need App reference here? 

  //Here we defined default values for this role. (name, description... and the default permissions.)
  name           String
  description    String?
  minUsers       Int             @default(0)
  maxUsers       Int             @default(0)
  AppPermissions AppPermission[]

  TeamAppRoles TeamAppRole[] //Effective role(s) within a team. Spawned from this model after app is installed. (post-clone)

  @@index([appId])
}

//? TeamAppRole defines which roles are available for an app in a team, and also which users have this role.
//? Default roles are cloned from AppRole upon app install.
model TeamAppRole {
  id String @id @default(cuid())

  name        String
  description String?
  minUsers    Int     @default(0)
  maxUsers    Int     @default(0)

  appId String
  App   App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  teamId String
  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  Users User[]

  appRole_defaultId String? //The default role from where this role was cloned from upon app install
  AppRole_default   AppRole_default? @relation(fields: [appRole_defaultId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  AppPermissions AppPermission[] //Permissions granted for this role. (defaults are cloned from AppRole_default.AppPermissions on app install)

  @@index([teamId])
  @@index([appRole_defaultId])
  @@index([appId])
}

//*---------------------   END ACCESS CONTROL    ---------------------*//

model AppTeamConfig {
  id     String @id @default(cuid())
  config Json
  appId  String
  App    App    @relation("AppConfig", fields: [appId], references: [id], onDelete: Cascade)

  teamId String
  Team   Team   @relation("TeamConfig", fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([appId, teamId])
  @@index([appId])
  @@index([teamId])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Users     User[]   @relation("UserTeam")

  ownerId String
  Owner   User   @relation("UserTeamOwner", fields: [ownerId], references: [id], onUpdate: NoAction)

  ActiveUsers  User[]        @relation("UserActiveTeam")
  ActiveApps   App[]         @relation("AppTeam")
  Todos        Todo[]
  EventMasters EventMaster[]
  Invitations  Invitation[]

  AppTeamConfigs AppTeamConfig[] @relation("TeamConfig")
  TeamAppRoles   TeamAppRole[]
  CareShift      CareShift[]
  CareTask       CareTask[]

  @@index([ownerId])
}

model Invitation {
  id        String   @id @default(cuid())
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  email     String
  accepted  Boolean  @default(false) //Is this necessary? Since we just delete the invitation when the user accepts it
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model App {
  id               String          @id @default(cuid())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  subscriptionCost Decimal
  Teams            Team[]          @relation("AppTeam")
  DevPartner       DevPartner      @relation(fields: [devPartnerId], references: [id])
  devPartnerId     String
  AppTeamConfigs   AppTeamConfig[] @relation("AppConfig")

  AppRole_defaults AppRole_default[]
  TeamAppRoles     TeamAppRole[]
  AppPermissions   AppPermission[]

  @@index([devPartnerId])
}

model DevPartner {
  id         String   @id @default(cuid())
  name       String
  partnerUrl String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Apps       App[]
}

enum Status {
  TODO
  INPROGRESS
  INREVIEW
  DONE
  CANCELED
}

model Todo {
  id          String    @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  //** 0 - No Priority
  //** 1 - Low
  //** 2 - Medium
  //** 3 - High
  priority    Int? //0 1 - LOW, 2 - MEDIUM, 3 high
  category    String?
  status      Status?
  reminder    Boolean?

  assignedToUserId String?
  AssignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])

  teamId String
  Team   Team   @relation(fields: [teamId], references: [id])

  @@index([teamId])
  @@index([assignedToUserId])
}

model EventMaster {
  id        String    @id @default(cuid())
  rule      String
  DateStart DateTime
  DateUntil DateTime?

  title       String?
  description String?

  EventExceptions    EventException[]
  EventCancellations EventCancellation[]
  CareTasks          CareTask[]

  Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  @@index([teamId])
}

model EventException {
  id           String   @id @default(cuid())
  originalDate DateTime
  newDate      DateTime

  title       String?
  description String?

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id], onDelete: Cascade)
  eventMasterId String

  @@index([eventMasterId])
}

model EventCancellation {
  id           String   @id @default(cuid())
  originalDate DateTime

  EventMaster   EventMaster @relation(fields: [eventMasterId], references: [id], onDelete: Cascade)
  eventMasterId String

  @@index([eventMasterId])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  Accounts      Account[]
  Sessions      Session[]
  Teams         Team[]    @relation("UserTeam")
  Todos         Todo[]

  activeTeamId String
  ActiveTeam   Team   @relation("UserActiveTeam", fields: [activeTeamId], references: [id])

  CareTasks   CareTask[]
  OwnedTeams  Team[]        @relation("UserTeamOwner")
  CareShifts  CareShift[]
  TeamAppRole TeamAppRole[]

  @@index([activeTeamId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
