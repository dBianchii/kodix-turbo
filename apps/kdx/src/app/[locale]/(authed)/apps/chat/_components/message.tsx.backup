"use client";

import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";

import { cn } from "@kdx/ui";

interface MessageProps {
  role: "user" | "assistant";
  content: string;
  isStreaming?: boolean;
  className?: string;
}

export function Message({
  role,
  content,
  isStreaming = false,
  className,
}: MessageProps) {
  return (
    <div
      className={cn(
        "group relative w-full py-6 text-lg",
        role === "user"
          ? "px-0" // Usuário: sem padding lateral para ficar 100% à direita
          : "px-0", // Assistente: sem padding lateral (container pai já tem)
        className,
      )}
    >
      {/* Container com alinhamento baseado no role */}
      <div
        className={cn(
          "flex",
          role === "user"
            ? "justify-end" // Usuário: alinhado à direita
            : "w-full justify-start", // Assistente: largura total
        )}
      >
        {/* Content Container */}
        <div
          className={cn(
            "min-w-0 space-y-2 overflow-hidden",
            role === "user" ? "max-w-[80%]" : "w-full",
          )}
        >
          {/* Message Bubble */}
          <div
            className={cn(
              "rounded-2xl shadow-sm",
              role === "user"
                ? "bg-primary text-primary-foreground px-4 py-3" // Mensagem do usuário: padding normal
                : "bg-muted/50 border-border border px-0 py-3", // Mensagem do assistente: sem padding lateral
            )}
          >
            {/* Role Label - apenas para assistente */}
            {role === "assistant" && (
              <div className="text-muted-foreground mb-2 px-4 text-xs font-medium">
                Assistant
              </div>
            )}

            {/* Message Content */}
            <div
              className={cn(
                "prose prose-xl max-w-none text-lg",
                role === "user"
                  ? "prose-invert" // Texto branco para mensagens do usuário
                  : "dark:prose-invert", // Tema escuro padrão para assistente
                role === "user"
                  ? "text-primary-foreground" // Texto branco para mensagens do usuário
                  : "px-4", // Assistente: padding apenas no conteúdo
              )}
            >
              {content ? (
                role === "assistant" ? (
                  <ReactMarkdown
                    remarkPlugins={[remarkGfm]}
                    components={{
                      // Customizar componentes para seguir o design do assistant-ui
                      p: ({ children }) => (
                        <p className="mb-3 leading-relaxed last:mb-0">
                          {children}
                        </p>
                      ),
                      h1: ({ children }) => (
                        <h1 className="mb-4 text-xl font-semibold">
                          {children}
                        </h1>
                      ),
                      h2: ({ children }) => (
                        <h2 className="mb-3 text-lg font-semibold">
                          {children}
                        </h2>
                      ),
                      h3: ({ children }) => (
                        <h3 className="mb-2 text-base font-semibold">
                          {children}
                        </h3>
                      ),
                      code: ({ className, children, ...props }: any) => {
                        const match = /language-(\w+)/.exec(className || "");
                        return !match ? (
                          <code
                            className="bg-muted/80 rounded px-1.5 py-0.5 font-mono text-sm"
                            {...props}
                          >
                            {children}
                          </code>
                        ) : (
                          <code className={className} {...props}>
                            {children}
                          </code>
                        );
                      },
                      pre: ({ children }) => (
                        <pre className="bg-muted/80 mb-4 overflow-x-auto rounded-lg p-4 text-sm">
                          {children}
                        </pre>
                      ),
                      ul: ({ children }) => (
                        <ul className="mb-4 ml-4 list-disc space-y-1">
                          {children}
                        </ul>
                      ),
                      ol: ({ children }) => (
                        <ol className="mb-4 ml-4 list-decimal space-y-1">
                          {children}
                        </ol>
                      ),
                      li: ({ children }) => (
                        <li className="leading-relaxed">{children}</li>
                      ),
                      blockquote: ({ children }) => (
                        <blockquote className="border-muted-foreground/50 text-muted-foreground mb-4 border-l-4 pl-4 italic">
                          {children}
                        </blockquote>
                      ),
                      strong: ({ children }) => (
                        <strong className="font-semibold">{children}</strong>
                      ),
                    }}
                  >
                    {content}
                  </ReactMarkdown>
                ) : (
                  <div className="text-lg leading-relaxed whitespace-pre-wrap">
                    {content}
                  </div>
                )
              ) : isStreaming ? (
                <div className="flex items-center space-x-1">
                  <div className="animate-pulse">●</div>
                  <div className="animate-pulse delay-100">●</div>
                  <div className="animate-pulse delay-200">●</div>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
