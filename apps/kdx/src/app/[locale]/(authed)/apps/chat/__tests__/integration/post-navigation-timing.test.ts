/**
 * üß™ TESTES DE TIMING - Envio P√≥s-Navega√ß√£o
 *
 * Objetivo: Prevenir regress√µes no timing do envio p√≥s-navega√ß√£o
 * que causavam necessidade de refresh para ver resposta da IA.
 *
 * Cen√°rios cr√≠ticos testados:
 * - Race conditions entre useChat e initialMessages
 * - Timing de carregamento de sess√£o vs envio de mensagem
 * - Condi√ß√µes de loading states conflitantes
 */

import { beforeEach, describe, expect, it, vi } from "vitest";

// Mock do sessionStorage
const mockSessionStorage = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
};

// Mock do window object para ambiente de teste
Object.defineProperty(globalThis, "window", {
  value: {
    sessionStorage: mockSessionStorage,
  },
  configurable: true,
});

// Mock do hook useChat
const mockUseChat = {
  messages: [] as any[],
  append: vi.fn(),
  isLoading: false,
};

// Mock do hook useSessionWithMessages
const mockUseSessionWithMessages = {
  initialMessages: undefined as any[] | undefined,
  isLoading: false,
  session: null,
};

vi.mock("@ai-sdk/react", () => ({
  useChat: () => mockUseChat,
}));

describe("üß™ POST-NAVIGATION TIMING - Preven√ß√£o de Regress√µes", () => {
  beforeEach(() => {
    vi.clearAllMocks();
    mockUseChat.messages = [];
    mockUseChat.isLoading = false;
    mockUseSessionWithMessages.initialMessages = undefined;
    mockUseSessionWithMessages.isLoading = false;
  });

  describe("üîÑ Condi√ß√µes de Envio P√≥s-Navega√ß√£o", () => {
    it("deve enviar quando todas as condi√ß√µes est√£o corretas", () => {
      // Simular condi√ß√µes ideais
      const sessionId = "test-session-123";
      const pendingMessage = "Mensagem de teste";
      const messagesLength = 0; // Nova sess√£o
      const isLoadingSession = false; // Sess√£o carregada
      const initialMessagesLoaded = true; // initialMessages carregou

      mockSessionStorage.getItem.mockReturnValue(pendingMessage);

      // Condi√ß√£o de envio (igual √† implementa√ß√£o real)
      const shouldSend =
        sessionId &&
        pendingMessage &&
        (messagesLength as number) === 0 &&
        !isLoadingSession &&
        initialMessagesLoaded;

      expect(shouldSend).toBe(true);
      // Nota: Este teste valida a l√≥gica, n√£o a chamada real do sessionStorage
    });

    it("deve aguardar quando sess√£o ainda est√° carregando", () => {
      const sessionId = "test-session-123";
      const pendingMessage = "Mensagem de teste";
      const messagesLength = 0;
      const isLoadingSession = true; // ‚ùå Ainda carregando
      const initialMessagesLoaded = false; // ‚ùå N√£o carregou

      mockSessionStorage.getItem.mockReturnValue(pendingMessage);

      const shouldSend =
        sessionId &&
        pendingMessage &&
        (messagesLength as number) === 0 &&
        !isLoadingSession &&
        initialMessagesLoaded;

      expect(shouldSend).toBe(false);
    });

    it("deve prevenir envio em sess√£o existente (com mensagens)", () => {
      const sessionId = "test-session-123";
      const pendingMessage = "Mensagem de teste";
      const messagesLength = 2; // ‚ùå J√° h√° mensagens
      const isLoadingSession = false;
      const initialMessagesLoaded = true;

      mockSessionStorage.getItem.mockReturnValue(pendingMessage);

      const shouldSend =
        sessionId &&
        pendingMessage &&
        (messagesLength as number) === 0 && // ‚ùå Falha aqui
        !isLoadingSession &&
        initialMessagesLoaded;

      expect(shouldSend).toBe(false);
    });

    it("deve prevenir envio sem mensagem pendente", () => {
      const sessionId = "test-session-123";
      const pendingMessage = null; // ‚ùå Sem mensagem
      const messagesLength = 0;
      const isLoadingSession = false;
      const initialMessagesLoaded = true;

      mockSessionStorage.getItem.mockReturnValue(pendingMessage);

      const shouldSend = Boolean(
        sessionId &&
          pendingMessage && // ‚ùå Falha aqui (null)
          (messagesLength as number) === 0 &&
          !isLoadingSession &&
          initialMessagesLoaded,
      );

      expect(shouldSend).toBe(false);
    });
  });

  describe("üö® Bug Original - Race Condition", () => {
    it("deve funcionar com nova condi√ß√£o mesmo quando useChat est√° loading", () => {
      // Este era o cen√°rio que causava o bug original
      const sessionId = "test-session-123";
      const pendingMessage = "Mensagem de teste";
      const messagesLength = 0;
      const isLoadingSession = false; // ‚úÖ Sess√£o carregada
      const initialMessagesLoaded = true; // ‚úÖ initialMessages carregou
      const useChatIsLoading = true; // ‚ö†Ô∏è useChat ainda loading (n√£o importa mais)

      mockSessionStorage.getItem.mockReturnValue(pendingMessage);

      // Condi√ß√£o ANTIGA (problem√°tica) - dependia de !useChatIsLoading
      const oldCondition =
        sessionId &&
        pendingMessage &&
        messagesLength === 0 &&
        !useChatIsLoading;
      expect(oldCondition).toBe(false); // Falharia

      // Condi√ß√£o NOVA (corrigida) - n√£o depende de useChatIsLoading
      const newCondition =
        sessionId &&
        pendingMessage &&
        messagesLength === 0 &&
        !isLoadingSession &&
        initialMessagesLoaded;
      expect(newCondition).toBe(true); // Funciona!
    });
  });

  describe("üîß Valida√ß√£o de SessionStorage", () => {
    it("deve verificar chave correta de mensagem pendente", () => {
      const sessionId = "test-session-123";
      const expectedKey = `pending-message-${sessionId}`;
      const expectedMessage = "Mensagem pendente";

      mockSessionStorage.getItem.mockReturnValue(expectedMessage);

      const result = mockSessionStorage.getItem(expectedKey);
      expect(mockSessionStorage.getItem).toHaveBeenCalledWith(expectedKey);
      expect(result).toBe(expectedMessage);
    });

    it("deve limpar mensagem ap√≥s envio", () => {
      const sessionId = "test-session-123";
      const expectedKey = `pending-message-${sessionId}`;

      mockSessionStorage.removeItem(expectedKey);
      expect(mockSessionStorage.removeItem).toHaveBeenCalledWith(expectedKey);
    });
  });

  describe("üì± Fluxo Completo", () => {
    it("deve simular fluxo: cria√ß√£o ‚Üí navega√ß√£o ‚Üí envio", () => {
      const userMessage = "Como fazer um bolo?";
      const sessionId = "new-session-456";

      // 1. Salvar mensagem tempor√°ria
      const tempKey = "pending-message-temp-123";
      mockSessionStorage.setItem(tempKey, userMessage);
      expect(mockSessionStorage.setItem).toHaveBeenCalledWith(
        tempKey,
        userMessage,
      );

      // 2. Ap√≥s navega√ß√£o, verificar se enviaria
      mockSessionStorage.getItem.mockReturnValue(userMessage);

      const shouldSend =
        sessionId &&
        userMessage &&
        (0 as number) === 0 && // Nova sess√£o
        !false && // Sess√£o carregada
        true; // initialMessages carregou
      expect(shouldSend).toBe(true);

      // 3. Limpar ap√≥s envio
      const sessionKey = `pending-message-${sessionId}`;
      mockSessionStorage.removeItem(sessionKey);
      expect(mockSessionStorage.removeItem).toHaveBeenCalledWith(sessionKey);
    });
  });
});
