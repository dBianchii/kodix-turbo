import { useCallback, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";

import { useTRPC } from "~/trpc/react";
import { useChatUserConfig } from "./useChatUserConfig";

/**
 * Hook para buscar o modelo preferido do usu√°rio seguindo hierarquia de prioridade:
 * 1¬™ Prioridade: preferredModelId do usu√°rio (via useChatUserConfig)
 * 2¬™ Prioridade: Modelo padr√£o do AI Studio (via Service Layer)
 * 3¬™ Prioridade: Primeiro modelo ativo dispon√≠vel (via Service Layer)
 *
 * ‚úÖ CORRIGIDO: Agora usa useChatUserConfig com escopo de USU√ÅRIO, n√£o team
 * Chat ‚îÄ‚îÄuseChatUserConfig‚îÄ‚îÄ> userAppTeamConfig ‚îÄ‚îÄ> Fallback para AI Studio
 *
 * ‚úÖ OTIMIZADO: Memoiza√ß√£o agressiva para reduzir re-renders
 */
export function useChatPreferredModel() {
  const trpc = useTRPC();

  // ‚úÖ USAR useChatUserConfig como fonte principal (configura√ß√µes de USU√ÅRIO)
  const {
    config,
    isLoading: isConfigLoading,
    getPreferredModelId,
  } = useChatUserConfig();

  // ‚úÖ OTIMIZA√á√ÉO: Memoizar valores derivados para evitar re-c√°lculos
  const derivedValues = useMemo(() => {
    const modelFromUserConfig = getPreferredModelId();
    const finalModelId = modelFromUserConfig;
    const source = modelFromUserConfig ? "user_config" : "none";

    if (process.env.NODE_ENV === "development") {
      console.log("üîÑ [CHAT_PREFERRED_MODEL] Determinando modelo:", {
        modelFromUserConfig,
        finalModelId,
        source,
        isConfigLoading,
      });
    }

    return {
      modelFromUserConfig,
      finalModelId,
      source,
    };
  }, [getPreferredModelId, isConfigLoading]);

  // ‚úÖ OTIMIZA√á√ÉO: Memoizar fun√ß√£o refetch (mesmo que n√£o fa√ßa nada)
  const refetch = useCallback(() => {
    // Nada para refetch por enquanto
  }, []);

  // ‚úÖ OTIMIZA√á√ÉO: Memoizar objeto preferredModel para evitar re-cria√ß√£o
  const preferredModel = useMemo(() => {
    return derivedValues.finalModelId
      ? {
          modelId: derivedValues.finalModelId,
          model: null,
          source: derivedValues.source,
          teamConfig: null,
          userConfig: config,
        }
      : null;
  }, [derivedValues.finalModelId, derivedValues.source, config]);

  // ‚úÖ OTIMIZA√á√ÉO: Memoizar objeto de retorno completo
  return useMemo(
    () => ({
      preferredModel,
      isLoading: isConfigLoading,
      error: null,
      refetch,

      // Helpers para facilitar o uso - memoizados
      modelId: derivedValues.finalModelId,
      model: null,
      source: derivedValues.source,

      // ‚úÖ Verifica√ß√µes √∫teis atualizadas - memoizadas
      isFromUserConfig: derivedValues.source === "user_config",
      isFromAiStudio: false,
      isFallback: false,

      // Informa√ß√µes adicionais - memoizadas
      hasTeamConfig: false,
      hasUserConfig: !!config,

      // Status helpers - memoizados
      isReady: !isConfigLoading && !!derivedValues.finalModelId,
      hasError: false,
    }),
    [
      preferredModel,
      isConfigLoading,
      refetch,
      derivedValues.finalModelId,
      derivedValues.source,
      config,
    ],
  );
}
