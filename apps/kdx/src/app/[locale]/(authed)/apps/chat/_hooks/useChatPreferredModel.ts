import { useQuery } from "@tanstack/react-query";

import { useTRPC } from "~/trpc/react";
import { useChatUserConfig } from "./useChatUserConfig";

/**
 * Hook para buscar o modelo preferido do usu√°rio seguindo hierarquia de prioridade:
 * 1¬™ Prioridade: preferredModelId do usu√°rio (via useChatUserConfig)
 * 2¬™ Prioridade: Modelo padr√£o do AI Studio (via Service Layer)
 * 3¬™ Prioridade: Primeiro modelo ativo dispon√≠vel (via Service Layer)
 *
 * ‚úÖ CORRIGIDO: Agora usa useChatUserConfig com escopo de USU√ÅRIO, n√£o team
 * Chat ‚îÄ‚îÄuseChatUserConfig‚îÄ‚îÄ> userAppTeamConfig ‚îÄ‚îÄ> Fallback para AI Studio
 */
export function useChatPreferredModel() {
  const trpc = useTRPC();

  // ‚úÖ USAR useChatUserConfig como fonte principal (configura√ß√µes de USU√ÅRIO)
  const {
    config,
    isLoading: isConfigLoading,
    getPreferredModelId,
  } = useChatUserConfig();

  // ‚úÖ Simplificado: usar apenas config do usu√°rio por enquanto
  const modelFromUserConfig = getPreferredModelId();
  const finalModelId = modelFromUserConfig;
  const source = modelFromUserConfig ? "user_config" : "none";

  console.log("üîÑ [useChatPreferredModel] Determinando modelo:", {
    modelFromUserConfig,
    finalModelId,
    source,
    isConfigLoading,
  });

  const isLoading = isConfigLoading;
  const error = null;
  const refetch = () => {
    // Nada para refetch por enquanto
  };

  return {
    preferredModel: finalModelId
      ? {
          modelId: finalModelId,
          model: null,
          source,
          teamConfig: null,
          userConfig: config,
        }
      : null,
    isLoading,
    error,
    refetch,

    // Helpers para facilitar o uso
    modelId: finalModelId,
    model: null,
    source,

    // ‚úÖ Verifica√ß√µes √∫teis atualizadas
    isFromUserConfig: source === "user_config",
    isFromAiStudio: false,
    isFallback: false,

    // Informa√ß√µes adicionais
    hasTeamConfig: false,
    hasUserConfig: !!config,

    // Status helpers
    isReady: !isLoading && !!finalModelId,
    hasError: false,
  };
}
